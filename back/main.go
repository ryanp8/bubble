package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	bubble "bubble/internal"

	"github.com/labstack/echo/v5"
	"github.com/pocketbase/pocketbase"
	"github.com/pocketbase/pocketbase/apis"
	"github.com/pocketbase/pocketbase/core"
	"github.com/pocketbase/pocketbase/models"
)

func main() {
	app := pocketbase.New()
	httpClient := new(http.Client)

	app.OnBeforeServe().Add(func(e *core.ServeEvent) error {

		// Index root
		e.Router.AddRoute(echo.Route{
			Method: http.MethodGet,
			Path:   "/",
			Handler: func(c echo.Context) error {
				return c.String(200, "hello")
			},
		})

		// Login to Spotify using authorization code generated by the client
		e.Router.AddRoute(echo.Route{
			Method: http.MethodPost,
			Path:   "/api/login",
			Handler: func(c echo.Context) error {
				body := new(bubble.AuthRequestBody)
				if err := c.Bind(body); err != nil {
					log.Println(err)
					return c.String(400, bubble.ErrorResponse(err))
				}

				// Get access token from spotify using PKCE
				tokenResponse, err := bubble.GetTokens(httpClient, body)
				if err != nil {
					log.Println(err)
					return c.String(400, bubble.ErrorResponse(err))
				}

				// Use access token to get user info
				userInfo, err := bubble.MakeSpotifyRequest(app, "GET", "https://api.spotify.com/v1/me", tokenResponse)
				if err != nil {
					log.Println(err)
					return c.String(400, bubble.ErrorResponse(err))
				}

				userId := (*userInfo)["id"].(string)
				username := (*userInfo)["display_name"].(string)
				userEmail := (*userInfo)["email"].(string)

				userRecord, err := app.Dao().FindRecordById("users", userId)

				fmt.Println(userRecord)
				if err != nil {
					userCollection, err := app.Dao().FindCollectionByNameOrId("users")
					if err != nil {
						log.Println(err)
						return c.String(400, bubble.ErrorResponse(err))
					}
					userRecord = models.NewRecord(userCollection)
					userRecord.Set("id", userId)
					userRecord.Set("username", username)
					userRecord.Set("email", userEmail)
				}

				userRecord.Set("accessToken", tokenResponse.AccessToken)
				userRecord.Set("refreshToken", tokenResponse.RefreshToken)

				if err := app.Dao().SaveRecord(userRecord); err != nil {
					log.Println(err)
					return c.String(400, bubble.ErrorResponse(err))
				}
				response := &map[string]string{
					"userId":       userId,
					"email":        userEmail,
					"display_name": username,
					"access_token": tokenResponse.AccessToken,
				}
				return c.JSON(200, response)
			},
			Middlewares: []echo.MiddlewareFunc{
				apis.ActivityLogger(app),
			},
		})

		// Make a new room
		e.Router.AddRoute(echo.Route{
			Method: http.MethodPost,
			Path:   "/rooms/:id",
			Handler: func(c echo.Context) error {
				roomId := c.PathParam("id")
				body := new(struct {
					UserId string `json:"user_id"`
				})
				if err := c.Bind(body); err != nil {
					log.Println(err)
					return c.String(400, bubble.ErrorResponse(err))
				}

				_, err := app.Dao().FindRecordById("rooms", roomId)

				if err != nil {
					rooms, err := app.Dao().FindCollectionByNameOrId("rooms")
					if err != nil {
						log.Println(err)
						return c.String(400, err.Error())
					}
					roomRecord := models.NewRecord(rooms)
					roomRecord.Set("id", roomId)
					roomRecord.Set("owner", body.UserId)
					roomRecord.Set("users", []string{body.UserId})
					roomRecord.Set("songs", make([]interface{}, 0))
					if err := app.Dao().SaveRecord(roomRecord); err != nil {
						return err
					}
					return c.String(200, "created room")
				}

				return c.String(200, "room already exists")
			},
		})

		// Verifies that the room exists by send 200 OK and the room owner
		// If the room doesn't exist, let the client know by sending 404 response
		e.Router.AddRoute(echo.Route{
			Method: http.MethodGet,
			Path:   "/rooms/:id",
			Handler: func(c echo.Context) error {
				roomId := c.PathParam("id")
				roomOwner, err := bubble.GetRoomOwner(app, roomId)
				if err != nil || roomOwner == nil {
					return c.String(404, "")
				}
				return c.JSON(200, map[string]string{
					"owner": roomOwner.GetString("username"),
				})
			},
		})

		// Add song to room queue
		e.Router.AddRoute(echo.Route{
			Method: http.MethodPost,
			Path:   "/rooms/:id/queue",
			Handler: func(c echo.Context) error {
				roomId := c.PathParam("id")

				requestBody := new(struct {
					SpotifyUri string `json:"spotify_uri"`
				})

				if err := c.Bind(requestBody); err != nil {
					log.Println(err.Error())
					return c.String(400, bubble.ErrorResponse(err))
				}

				tokens, err := bubble.GetRoomOwnerTokens(app, roomId)
				if err != nil {
					return c.JSON(404, bubble.ErrorResponse(err))
				}

				url := "https://api.spotify.com/v1/me/player/queue?uri=" + requestBody.SpotifyUri

				decoded, err := bubble.MakeSpotifyRequest(app, "POST", url, tokens)
				fmt.Println(decoded)

				errorReceived, ok := (*decoded)["error"]
				if err != nil || (ok && errorReceived.(map[string]interface{})["status"].(float64) == 404) {
					return c.JSON(404, map[string]string{
						"message": "error occured",
					})
				}
				return c.JSON(200, decoded)
			},
		})

		// Search for song
		e.Router.AddRoute(echo.Route{
			Method: http.MethodGet,
			Path:   "/rooms/:roomId/search",
			Handler: func(c echo.Context) error {
				roomId := c.PathParam("roomId")
				track := c.QueryParam("track")
				tokens, err := bubble.GetRoomOwnerTokens(app, roomId)
				if err != nil {
					return c.JSON(404, bubble.ErrorResponse(err))
				}

				url := "https://api.spotify.com/v1/search?q=" + strings.Replace(track, " ", "+", -1) + "&type=track"

				decoded, err := bubble.MakeSpotifyRequest(app, "GET", url, tokens)
				if err != nil || ((*decoded)["status"] != nil && (*decoded)["status"] != 200) {
					return c.JSON(404, map[string]string{
						"message": "error occured",
					})
				}
				return c.JSON(200, decoded)
			},
		})

		// Remove room
		e.Router.AddRoute(echo.Route{
			Method: http.MethodDelete,
			Path:   "/rooms/:roomId",
			Handler: func(c echo.Context) error {
				roomId := c.PathParam("roomId")
				fmt.Println("CLOSING ROOM")
				roomRecord, err := app.Dao().FindRecordById("rooms", roomId)
				if err != nil {
					return c.JSON(400, bubble.ErrorResponse(err))
				}

				if err := app.Dao().DeleteRecord(roomRecord); err != nil {
					return c.JSON(400, bubble.ErrorResponse(err))
				}
				return c.JSON(200, map[string]string{
					"message": "removed room",
				})
			},
		})

		// Get owner's top songs
		e.Router.AddRoute(echo.Route{
			Method: http.MethodGet,
			Path:   "/rooms/:roomId/top",
			Handler: func(c echo.Context) error {
				roomId := c.PathParam("roomId")
				tokens, _ := bubble.GetRoomOwnerTokens(app, roomId)

				url := "https://api.spotify.com/v1/me/top/tracks?time_range=short_term"
				response, err := bubble.MakeSpotifyRequest(app, "GET", url, tokens)
				if err != nil {
					return c.String(400, "error")
				}

				return c.JSON(200, response)
			},
		})

		return nil
	})

	if err := app.Start(); err != nil {
		log.Fatal(err)
	}
}
